import { CheckBox, GroupBox, VerticalBox, HorizontalBox, SpinBox, TextEdit, Button, Spinner } from "std-widgets.slint";
import "./assets/fonts/JetBrainsMono-Regular.ttf";
import "./assets/fonts/JetBrainsMono-Bold.ttf";
import "./assets/fonts/JetBrainsMono-LightItalic.ttf";
import { FanMode, Monitor, AppConfig, Palette, State } from "./global.slint";
import { BaseText, PropValue, BaseButton, Header } from "./shared.slint";
import { BatThreshold } from "./bat_threshold.slint";
import { Settings } from "./settings.slint";
import { RadioButton, Loader } from "shared.slint";

export { State }

export component App inherits Window {
    background: Palette.base;
    padding-top: 0;
    default-font-family: "JetBrains Mono";
    width: 25rem;
    height: 25rem;
    title: "GigaCenter";

    in-out property <Monitor> monitor;
    in property <bool> daemon_connected: true;

    property <int> tab_state;
    property <[string]> list-fan-modes: ["Normal", "Eco", "Power", "Turbo"];
    property <[image]> icons: [
        @image-url("./assets/svg/list-ul.svg"),
        @image-url("./assets/svg/fan.svg"),
        @image-url("./assets/svg/battery-full.svg"),
        @image-url("./assets/svg/gear.svg")
    ];

    function fan-mode-to-string(fan_mode: FanMode) -> string {
        if fan_mode == FanMode.Normal {
            "Normal"
        } else if fan-mode == FanMode.Eco {
            "Eco"
        } else if fan_mode == FanMode.Power {
            "Power"
        } else if fan_mode == FanMode.Turbo {
            "Turbo"
        } else {
            "Unsupported"
        }
    }

    VerticalBox {
        padding-top: 0;
        if tab_state == 0: info := VerticalBox {
            vertical-stretch: 1.0;
            alignment: start;
            Header {
                text: "Machine state";
            }

            PropValue {
                prop: "Fan mode";
                value: fan-mode-to-string(monitor.fan-mode);
            }

            PropValue {
                prop: "CPU temp";
                value: monitor.cpu-temp;
            }

            PropValue {
                prop: "GPU temp";
                value: monitor.gpu-temp;
            }

            PropValue {
                prop: "Battery threshold";
                value: monitor.bat-threshold;
            }

            PropValue {
                prop: "CPU fan speed";
                value: monitor.cpu-fan-speed;
            }

            PropValue {
                prop: "GPU fan speed";
                value: monitor.gpu-fan-speed;
            }
        }
        if tab_state == 1: fan_mode := VerticalBox {
            vertical-stretch: 1.0;
            alignment: start;
            Header {
                text: "Fan mode";
            }

            for i in [FanMode.Normal, FanMode.Eco, FanMode.Power, FanMode.Turbo]: RadioButton {
                checked: monitor.fan-mode == i ? true : false;
                clicked => {
                    if monitor.fan-mode == i {
                        return;
                    }
                    if State.blocked {
                        return;
                    }
                    monitor.fan-mode = i;
                    State.fan-mode-change(i)
                }
                name: fan-mode-to-string(i);
            }
        }
        if tab_state == 2: VerticalBox {
            vertical-stretch: 1.0;
            alignment: start;
            Header {
                text: "Battery threshold";
            }

            bat_threshold := BatThreshold {
                bat_threshold_monitor: monitor.bat-threshold;
            }
        }

        if tab_state == 3: VerticalBox {
            vertical-stretch: 1.0;
            alignment: start;
            Header {
                text: "Settings";
            }

            Settings {
                height: 100%;
            }
        }
        HorizontalBox {
            vertical-stretch: 0.0;
            height: 32px;
            for i in 4: Rectangle {
                area := TouchArea {
                    mouse-cursor: pointer;
                    clicked => {
                        root.tab_state = i;
                    }
                }

                image := Image {
                    width: 20px;
                    height: 20px;
                    source: icons[i];
                    colorize: Palette.surface2;
                    states [
                        active when tab_state == i: {
                            colorize: State.config.color;
                            opacity: 1;
                            out {
                                animate colorize, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                            in {
                                animate colorize, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                        }
                        hovered when area.has-hover: {
                            colorize: State.config.color;
                            opacity: 0.5;
                            out {
                                animate colorize, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                            in {
                                animate colorize, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                        }
                    ]
                }

                Rectangle {
                    width: parent.width;
                    height: 3px;
                    border-top-left-radius: 4px;
                    border-top-right-radius: 4px;
                    border-bottom-left-radius: 0;
                    border-bottom-right-radius: 0;
                    background: Palette.surface2;
                    y: parent.height + 10px;

                    states [
                        active when tab_state == i: {
                            background: State.config.color;
                            opacity: 1;
                            out {
                                animate background, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                            in {
                                animate background, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                        }
                        hovered when area.has-hover: {
                            background: State.config.color;
                            opacity: 0.5;
                            out {
                                animate background, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                            in {
                                animate background, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                        }
                    ]
                }

                Rectangle {
                    opacity: 0;
                    width: parent.width;
                    height: 4px;
                    border-top-left-radius: 4px;
                    border-top-right-radius: 4px;
                    border-bottom-left-radius: 0;
                    border-bottom-right-radius: 0;
                    background: Palette.surface2;
                    y: parent.height + 9px;

                    states [
                        active when tab_state == i: {
                            background: State.config.color;
                            opacity: 1;
                            out {
                                animate background, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                            in {
                                animate background, opacity {
                                    duration: 100ms;
                                    easing: ease-out;
                                }
                            }
                        }
                    ]
                }
            }
        }
    }

    if !daemon_connected: Rectangle {
        x: 0;
        y: 0;
        TouchArea { }

        width: root.width;
        height: root.height;
        background: Palette.base;
        Text {
            horizontal-alignment: center;
            vertical-alignment: center;
            text: "Please check gigacenter.service \nand restart the app";
            wrap: TextWrap.no-wrap;
            font-size: 14px;
        }
    }

    if State.show-loader: Rectangle {
        x: 0;
        y: 0;
        width: root.width;
        height: root.height;
        background: Palette.base;
        opacity: 0.4;
        TouchArea { }

        Loader { }
    }
}
